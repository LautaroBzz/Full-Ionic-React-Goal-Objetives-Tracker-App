{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Quadion\\\\Desktop\\\\Milanesas\\\\APPS\\\\SECOND IONIC-REACT APP\\\\myApp\\\\src\\\\Datos\\\\CursosContextoProveedor.tsx\";\n// 2da pagina de Datos\n// 9vo elemento creado\n// Todo esto lo llevo para App.tsx!!!!!\nimport React, { useState } from 'react';\nimport CursosContexto from \"./CursosContexto\";\n\nconst CursosContectoProveedor = props => {\n  const [cursos, setCursos] = useState([]); // Creo funciones para cada accion que detalle en \"CursosContexto\"\n\n  const añadirCurso = titulo => {};\n\n  const añadirObjetivo = () => {};\n\n  const borrarObjetivo = () => {};\n\n  const actualizarObjetivo = () => {};\n\n  return /*#__PURE__*/React.createElement(CursosContexto.Provider, {\n    value: {\n      cursos: cursos,\n      añadirCurso,\n      añadirObjetivo,\n      borrarObjetivo,\n      actualizarObjetivo\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CursosContectoProveedor; // Importo desde \"CursoContecto\" la interface \"Cursos\"\n// useState <Curso[]> = indico que los datos que voy a menjar en este State va a ser\n//                      un vector de Cursos. Asi aplicamos el mismo formato inicial\n//                      del State que es ([]).","map":{"version":3,"sources":["C:/Users/Quadion/Desktop/Milanesas/APPS/SECOND IONIC-REACT APP/myApp/src/Datos/CursosContextoProveedor.tsx"],"names":["React","useState","CursosContexto","CursosContectoProveedor","props","cursos","setCursos","añadirCurso","titulo","añadirObjetivo","borrarObjetivo","actualizarObjetivo","children"],"mappings":";AAAA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,cAAP,MAAsC,kBAAtC;;AAEA,MAAMC,uBAAiC,GAAGC,KAAK,IAAI;AAEjD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAY,EAAZ,CAApC,CAFiD,CAIjD;;AACA,QAAMM,WAAW,GAAIC,MAAD,IAAoB,CAEvC,CAFD;;AAIA,QAAMC,cAAc,GAAG,MAAM,CAAE,CAA/B;;AAEA,QAAMC,cAAc,GAAG,MAAM,CAAE,CAA/B;;AAEA,QAAMC,kBAAkB,GAAG,MAAM,CAAE,CAAnC;;AAGA,sBAEE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAC9BN,MAAAA,MAAM,EAAEA,MADsB;AAE9BE,MAAAA,WAF8B;AAG9BE,MAAAA,cAH8B;AAI9BC,MAAAA,cAJ8B;AAK9BC,MAAAA;AAL8B,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGP,KAAK,CAACQ,QAPT,CAFF;AAcD,CA9BD;;AAgCA,eAAeT,uBAAf,C,CAEA;AAEA;AACA;AACA","sourcesContent":["// 2da pagina de Datos\r\n// 9vo elemento creado\r\n\r\n// Todo esto lo llevo para App.tsx!!!!!\r\n\r\nimport React, { useState } from 'react'\r\n\r\nimport CursosContexto, { Curso } from \"./CursosContexto\"\r\n\r\nconst CursosContectoProveedor: React.FC = props => {\r\n\r\n  const [cursos, setCursos] = useState <Curso[]> ([]);\r\n\r\n  // Creo funciones para cada accion que detalle en \"CursosContexto\"\r\n  const añadirCurso = (titulo: string) => {\r\n\r\n  };\r\n\r\n  const añadirObjetivo = () => {};\r\n\r\n  const borrarObjetivo = () => {};\r\n\r\n  const actualizarObjetivo = () => {};\r\n\r\n\r\n  return (\r\n\r\n    <CursosContexto.Provider value={{\r\n      cursos: cursos,\r\n      añadirCurso,\r\n      añadirObjetivo,\r\n      borrarObjetivo,\r\n      actualizarObjetivo\r\n    }}>\r\n      {props.children}\r\n    </CursosContexto.Provider>\r\n\r\n  );\r\n\r\n};\r\n\r\nexport default CursosContectoProveedor;\r\n\r\n// Importo desde \"CursoContecto\" la interface \"Cursos\"\r\n\r\n// useState <Curso[]> = indico que los datos que voy a menjar en este State va a ser\r\n//                      un vector de Cursos. Asi aplicamos el mismo formato inicial\r\n//                      del State que es ([])."]},"metadata":{},"sourceType":"module"}