{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Quadion\\\\Desktop\\\\Milanesas\\\\APPS\\\\SECOND IONIC-REACT APP\\\\myApp\\\\src\\\\Datos\\\\CursosContextoProveedor.tsx\";\n// 2da pagina de Datos\n// 9vo elemento creado\n// Todo esto lo llevo para App.tsx!!!!!\nimport React, { useState } from 'react';\nimport CursosContexto from \"./CursosContexto\";\n\nconst CursosContectoProveedor = props => {\n  const [cursos, setCursos] = useState([]); // Creo funciones para cada accion que detalle en \"CursosContexto\"\n\n  const añadirCurso = titulo => {\n    const nuevoCurso = {\n      id: new Date().toString(),\n      titulo,\n      objetivos\n    };\n  };\n\n  const añadirObjetivo = () => {};\n\n  const borrarObjetivo = () => {};\n\n  const actualizarObjetivo = () => {};\n\n  return /*#__PURE__*/React.createElement(CursosContexto.Provider, {\n    value: {\n      cursos: cursos,\n      añadirCurso,\n      añadirObjetivo,\n      borrarObjetivo,\n      actualizarObjetivo\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CursosContectoProveedor; // Importo desde \"CursoContecto\" la interface \"Cursos\"\n// useState <Curso[]> = indico que los datos que voy a menjar en este State va a ser\n//                      un vector de Cursos. Asi aplicamos el mismo formato inicial\n//                      del State que es ([]).\n// nuevoCurso = le indicamos que la constante desde ser del tipo \"Curso\" \n//              (traido desde \"CursosContexto\") donde:\n//              interface Curso {\n//                id: string;\n//                titulo: string;\n//                objetivos: Objetivo[]; \n//              };\n// id: new Date().toString() = cada vez que añadimos un curso nuevo, este toma un id\n//                             igual al momento exacto a que se creo, en formato de texto.","map":{"version":3,"sources":["C:/Users/Quadion/Desktop/Milanesas/APPS/SECOND IONIC-REACT APP/myApp/src/Datos/CursosContextoProveedor.tsx"],"names":["React","useState","CursosContexto","CursosContectoProveedor","props","cursos","setCursos","añadirCurso","titulo","nuevoCurso","id","Date","toString","objetivos","añadirObjetivo","borrarObjetivo","actualizarObjetivo","children"],"mappings":";AAAA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,cAAP,MAAsC,kBAAtC;;AAEA,MAAMC,uBAAiC,GAAGC,KAAK,IAAI;AAEjD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAY,EAAZ,CAApC,CAFiD,CAIjD;;AACA,QAAMM,WAAW,GAAIC,MAAD,IAAoB;AACtC,UAAMC,UAAiB,GAAG;AACxBC,MAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,QAAX,EADoB;AAExBJ,MAAAA,MAFwB;AAGxBK,MAAAA;AAHwB,KAA1B;AAKD,GAND;;AAQA,QAAMC,cAAc,GAAG,MAAM,CAAE,CAA/B;;AAEA,QAAMC,cAAc,GAAG,MAAM,CAAE,CAA/B;;AAEA,QAAMC,kBAAkB,GAAG,MAAM,CAAE,CAAnC;;AAGA,sBAEE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAC9BX,MAAAA,MAAM,EAAEA,MADsB;AAE9BE,MAAAA,WAF8B;AAG9BO,MAAAA,cAH8B;AAI9BC,MAAAA,cAJ8B;AAK9BC,MAAAA;AAL8B,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGZ,KAAK,CAACa,QAPT,CAFF;AAcD,CAlCD;;AAoCA,eAAed,uBAAf,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// 2da pagina de Datos\r\n// 9vo elemento creado\r\n\r\n// Todo esto lo llevo para App.tsx!!!!!\r\n\r\nimport React, { useState } from 'react'\r\n\r\nimport CursosContexto, { Curso } from \"./CursosContexto\"\r\n\r\nconst CursosContectoProveedor: React.FC = props => {\r\n\r\n  const [cursos, setCursos] = useState <Curso[]> ([]);\r\n\r\n  // Creo funciones para cada accion que detalle en \"CursosContexto\"\r\n  const añadirCurso = (titulo: string) => {\r\n    const nuevoCurso: Curso = {\r\n      id: new Date().toString(),\r\n      titulo,\r\n      objetivos\r\n    };\r\n  };\r\n\r\n  const añadirObjetivo = () => {};\r\n\r\n  const borrarObjetivo = () => {};\r\n\r\n  const actualizarObjetivo = () => {};\r\n\r\n\r\n  return (\r\n\r\n    <CursosContexto.Provider value={{\r\n      cursos: cursos,\r\n      añadirCurso,\r\n      añadirObjetivo,\r\n      borrarObjetivo,\r\n      actualizarObjetivo\r\n    }}>\r\n      {props.children}\r\n    </CursosContexto.Provider>\r\n\r\n  );\r\n\r\n};\r\n\r\nexport default CursosContectoProveedor;\r\n\r\n// Importo desde \"CursoContecto\" la interface \"Cursos\"\r\n\r\n// useState <Curso[]> = indico que los datos que voy a menjar en este State va a ser\r\n//                      un vector de Cursos. Asi aplicamos el mismo formato inicial\r\n//                      del State que es ([]).\r\n\r\n// nuevoCurso = le indicamos que la constante desde ser del tipo \"Curso\" \r\n//              (traido desde \"CursosContexto\") donde:\r\n//              interface Curso {\r\n//                id: string;\r\n//                titulo: string;\r\n//                objetivos: Objetivo[]; \r\n//              };\r\n\r\n// id: new Date().toString() = cada vez que añadimos un curso nuevo, este toma un id\r\n//                             igual al momento exacto a que se creo, en formato de texto.\r\n"]},"metadata":{},"sourceType":"module"}