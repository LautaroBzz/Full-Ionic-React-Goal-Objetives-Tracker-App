{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Quadion\\\\Desktop\\\\Milanesas\\\\APPS\\\\SECOND IONIC-REACT APP\\\\myApp\\\\src\\\\Datos\\\\CursosContextoProveedor.tsx\";\n// 2da pagina de Datos\n// 9vo elemento creado\n// Todo esto lo llevo para App.tsx!!!!!\nimport React, { useState } from 'react';\nimport CursosContexto from \"./CursosContexto\";\n\nconst CursosContectoProveedor = props => {\n  const [cursos, setCursos] = useState([{\n    id: \"c1\",\n    titulo: \"Making Wine!\",\n    // Curso inicial de prueba\n    objetivos: []\n  }]); // Creo funciones para cada accion que detalle en \"CursosContexto\"\n\n  const añadirCurso = titulo => {\n    const nuevoCurso = {\n      id: new Date().toString(),\n      titulo,\n      objetivos: []\n    };\n    setCursos(actualCurso => {\n      return actualCurso.concat(nuevoCurso);\n    });\n  };\n\n  const añadirObjetivo = (cursoId, texto) => {\n    setCursos(cursos => {\n      const cursosActualizados = [...cursos];\n      const cursoActualizadoIndex = cursosActualizados.findIndex(curso => curso.id === cursoId);\n      return [];\n    });\n  };\n\n  const borrarObjetivo = () => {};\n\n  const actualizarObjetivo = () => {};\n\n  return /*#__PURE__*/React.createElement(CursosContexto.Provider, {\n    value: {\n      cursos: cursos,\n      añadirCurso,\n      añadirObjetivo,\n      borrarObjetivo,\n      actualizarObjetivo\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CursosContectoProveedor; // Importo desde \"CursoContecto\" la interface \"Cursos\"\n// useState <Curso[]> = indico que los datos que voy a menjar en este State va a ser\n//                      un vector de Cursos. Asi aplicamos el mismo formato inicial\n//                      del State que es ([]) >> aca creamos un curso inical de ejemplo\n// nuevoCurso = le indicamos que la constante desde ser del tipo \"Curso\" \n//              (traido desde \"CursosContexto\") donde:\n//              interface Curso {\n//                id: string;\n//                titulo: string;\n//                objetivos: Objetivo[]; \n//              };\n// id: new Date().toString() = cada vez que añadimos un curso nuevo, este toma un id\n//                             igual al momento exacto a que se creo, en formato de texto.\n// actualCurso.concat(nuevoCurso) = concateno los cursos previos al nuevo","map":{"version":3,"sources":["C:/Users/Quadion/Desktop/Milanesas/APPS/SECOND IONIC-REACT APP/myApp/src/Datos/CursosContextoProveedor.tsx"],"names":["React","useState","CursosContexto","CursosContectoProveedor","props","cursos","setCursos","id","titulo","objetivos","añadirCurso","nuevoCurso","Date","toString","actualCurso","concat","añadirObjetivo","cursoId","texto","cursosActualizados","cursoActualizadoIndex","findIndex","curso","borrarObjetivo","actualizarObjetivo","children"],"mappings":";AAAA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,cAAP,MAAsC,kBAAtC;;AAEA,MAAMC,uBAAiC,GAAGC,KAAK,IAAI;AAEjD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAY,CAC9C;AACEM,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,MAAM,EAAE,cAFV;AAEkC;AAChCC,IAAAA,SAAS,EAAE;AAHb,GAD8C,CAAZ,CAApC,CAFiD,CAUjD;;AACA,QAAMC,WAAW,GAAIF,MAAD,IAAoB;AAEtC,UAAMG,UAAiB,GAAG;AACxBJ,MAAAA,EAAE,EAAE,IAAIK,IAAJ,GAAWC,QAAX,EADoB;AAExBL,MAAAA,MAFwB;AAGxBC,MAAAA,SAAS,EAAE;AAHa,KAA1B;AAMAH,IAAAA,SAAS,CAAEQ,WAAD,IAAiB;AACzB,aAAOA,WAAW,CAACC,MAAZ,CAAmBJ,UAAnB,CAAP;AACD,KAFQ,CAAT;AAID,GAZD;;AAcA,QAAMK,cAAc,GAAG,CAACC,OAAD,EAAkBC,KAAlB,KAAoC;AACzDZ,IAAAA,SAAS,CAACD,MAAM,IAAI;AAClB,YAAMc,kBAAkB,GAAG,CAAC,GAAGd,MAAJ,CAA3B;AACA,YAAMe,qBAAqB,GAAGD,kBAAkB,CAACE,SAAnB,CAA6BC,KAAK,IAAIA,KAAK,CAACf,EAAN,KAAaU,OAAnD,CAA9B;AACA,aAAO,EAAP;AACD,KAJQ,CAAT;AAKD,GAND;;AAQA,QAAMM,cAAc,GAAG,MAAM,CAAE,CAA/B;;AAEA,QAAMC,kBAAkB,GAAG,MAAM,CAAE,CAAnC;;AAGA,sBAEE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAC9BnB,MAAAA,MAAM,EAAEA,MADsB;AAE9BK,MAAAA,WAF8B;AAG9BM,MAAAA,cAH8B;AAI9BO,MAAAA,cAJ8B;AAK9BC,MAAAA;AAL8B,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGpB,KAAK,CAACqB,QAPT,CAFF;AAcD,CApDD;;AAsDA,eAAetB,uBAAf,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// 2da pagina de Datos\r\n// 9vo elemento creado\r\n\r\n// Todo esto lo llevo para App.tsx!!!!!\r\n\r\nimport React, { useState } from 'react'\r\n\r\nimport CursosContexto, { Curso } from \"./CursosContexto\"\r\n\r\nconst CursosContectoProveedor: React.FC = props => {\r\n\r\n  const [cursos, setCursos] = useState <Curso[]> ([\r\n    {\r\n      id: \"c1\",\r\n      titulo: \"Making Wine!\",         // Curso inicial de prueba\r\n      objetivos: []\r\n    }\r\n  ]);\r\n\r\n  // Creo funciones para cada accion que detalle en \"CursosContexto\"\r\n  const añadirCurso = (titulo: string) => {\r\n\r\n    const nuevoCurso: Curso = {\r\n      id: new Date().toString(),\r\n      titulo,\r\n      objetivos: []\r\n    };\r\n\r\n    setCursos((actualCurso) => {\r\n      return actualCurso.concat(nuevoCurso);\r\n    });\r\n\r\n  };\r\n\r\n  const añadirObjetivo = (cursoId: string, texto: string) => {\r\n    setCursos(cursos => {\r\n      const cursosActualizados = [...cursos];\r\n      const cursoActualizadoIndex = cursosActualizados.findIndex(curso => curso.id === cursoId);\r\n      return [];\r\n    });\r\n  };\r\n\r\n  const borrarObjetivo = () => {};\r\n\r\n  const actualizarObjetivo = () => {};\r\n\r\n\r\n  return (\r\n\r\n    <CursosContexto.Provider value={{\r\n      cursos: cursos,\r\n      añadirCurso,\r\n      añadirObjetivo,\r\n      borrarObjetivo,\r\n      actualizarObjetivo\r\n    }}>\r\n      {props.children}\r\n    </CursosContexto.Provider>\r\n\r\n  );\r\n\r\n};\r\n\r\nexport default CursosContectoProveedor;\r\n\r\n// Importo desde \"CursoContecto\" la interface \"Cursos\"\r\n\r\n// useState <Curso[]> = indico que los datos que voy a menjar en este State va a ser\r\n//                      un vector de Cursos. Asi aplicamos el mismo formato inicial\r\n//                      del State que es ([]) >> aca creamos un curso inical de ejemplo\r\n\r\n// nuevoCurso = le indicamos que la constante desde ser del tipo \"Curso\" \r\n//              (traido desde \"CursosContexto\") donde:\r\n//              interface Curso {\r\n//                id: string;\r\n//                titulo: string;\r\n//                objetivos: Objetivo[]; \r\n//              };\r\n\r\n// id: new Date().toString() = cada vez que añadimos un curso nuevo, este toma un id\r\n//                             igual al momento exacto a que se creo, en formato de texto.\r\n\r\n// actualCurso.concat(nuevoCurso) = concateno los cursos previos al nuevo\r\n"]},"metadata":{},"sourceType":"module"}